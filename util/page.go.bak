// Copyright (C) 2012-2013 king4go authors All rights reserved.
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//           http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package util

import (
	"errors"
)

var (
	currPageError = errors.New("Current page must not be less than zero!")
	pageSizeError = errors.New("Page size must not be less than zero!")
)

type Pageable interface {

	// Returns the page to be returned.
	Current() int

	// Returns the number of items to be returned.
	PageSize() int

	// Returns the offset to be taken according to the underlying page and page size.
	Offset() int

	// Returns the sorting parameters.
	GetSort() *Sort

	// Returns the Pageable requesting the next Page.
	Next() Pageable

	// Returns the previous Pageable or the first Pageable
	// if the current one already is the first one.
	PrevOrFirst() Pageable

	// Returns the Pageable requesting the first page.
	First() Pageable

	// Returns whether there's a previous Pageable we can access from the current one.
	// Will return false in case the current Pageable already refers to the first page.
	HasPrevious() bool
}

// A page is a sublist of a list of objects.
// It allows gain information about the position of it in the containing entire list.
type Page interface {
	// Returns the number of the current page.
	// Is always non-negative and less that TotalPages().
	Current() int

	// Returns the size of the page.
	PageSize() int

	// Returns the number of total pages.
	TotalPages() int

	// Returns the number of elements currently on this page.
	NumberOfElements() int

	// Returns the total amount of elements.
	TotalElements() int64

	// Returns if there is a previous page.
	HasPrevPage() bool

	// Returns whether the current page is the first one.
	IsFirstPage() bool

	// Returns if there is a next page.
	HasNextPage() bool

	// Returns whether the current page is the last one.
	IsLastPage() bool

	// Returns the page content as array interfaces.
	Content() []interface{}

	// Returns whether the Page has content at all.
	HasContent() bool

	// Returns the sorting parameters for the page.
	GetSort() *Sort

	NextPageable() Pageable

	PrevPageable() Pageable

	// Returns this interface json string
	ToJSONString() string
}

type pageRequest struct {
	current  int
	pageSize int
	sort     *Sort
}

func NewPageable0(current int, pageSize int, sort *Sort) (Pageable, error) {
	if current <= 0 {
		return nil, currPageError
	}
	if pageSize < 0 {
		return nil, pageSizeError
	}
	pageable := &pageRequest{current, pageSize, sort}
	return pageable, nil
}

func NewPageable(current int, pageSize int, direction string, properties []string) (Pageable, error) {
	if current <= 0 {
		current = 1
	}
	sort, err := NewSort(direction, properties)
	if err != nil {
		return nil, err
	}
	return NewPageable0(current, pageSize, sort)
}

// Implementation Pageable interface
// ----------------------------------------------------------------------------
func (p pageRequest) Current() int {
	return p.current
}

func (p pageRequest) PageSize() int {
	return p.pageSize
}

func (p pageRequest) Offset() int {
	return (p.current - 1) * p.pageSize
}

func (p pageRequest) GetSort() *Sort {
	return p.sort
}

func (p pageRequest) HasPrevious() bool {
	return p.current > 1
}

func (p pageRequest) Next() Pageable {
	return &pageRequest{p.current + 1, p.pageSize, p.sort}
}

func (p pageRequest) First() Pageable {
	return &pageRequest{1, p.pageSize, p.sort}
}

func (p *pageRequest) PrevOrFirst() Pageable {
	if p.HasPrevious() {
		return &pageRequest{p.current - 1, p.pageSize, p.sort}
	} else {
		return p
	}
}

type pageImpl struct {
	content  []interface{}
	pageable Pageable
	total    int64
}

func NewPage(content []interface{}, pageable Pageable, total int64) *pageImpl {
	return &pageImpl{content, pageable, total}
}

// Implementation Page interface
// ----------------------------------------------------------------------------
func (p pageImpl) Current() int {
	if p.pageable == nil {
		return 1
	}
	return p.pageable.Current()
}

func (p pageImpl) PageSize() int {
	if p.pageable == nil {
		return 0
	}
	return p.pageable.PageSize()
}

func (p pageImpl) TotalPages() int {
	if p.PageSize() == 0 {
		return 1
	}
	intTotal := int(p.total)
	if intTotal%p.PageSize() == 0 {
		return intTotal / p.PageSize()
	} else {
		return intTotal/p.PageSize() + 1
	}
}

func (p pageImpl) NumberOfElements() int {
	return len(p.content)
}

func (p pageImpl) TotalElements() int64 {
	return p.total
}

func (p pageImpl) HasPrevPage() bool {
	return p.Current() > 1
}

func (p pageImpl) IsFirstPage() bool {
	return !p.HasPrevPage()
}

func (p pageImpl) HasNextPage() bool {
	return p.Current()+1 < p.TotalPages()
}

func (p pageImpl) IsLastPage() bool {
	return !p.HasNextPage()
}

func (p pageImpl) Content() []interface{} {
	return p.content
}

func (p pageImpl) HasContent() bool {
	return len(p.content) > 0
}

func (p *pageImpl) GetSort() *Sort {
	if p.pageable == nil {
		return nil
	}
	return p.pageable.GetSort()
}

func (p pageImpl) NextPageable() Pageable {
	if p.HasNextPage() {
		return p.pageable.Next()
	}
	return nil
}

func (p pageImpl) PrevPageable() Pageable {
	if p.HasPrevPage() {
		return p.pageable.PrevOrFirst()
	}
	return nil
}

func (p pageImpl) ToJSONString() string {

}
